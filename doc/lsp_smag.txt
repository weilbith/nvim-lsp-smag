*lsp_smag.txt*				Smart tags by language server support

Version:  0.1
Author:   Thore Weilbier <thore@weilbier.net>
License:  MIT

==============================================================================
						  *lsp_smag_table_of_contents*
TABLE OF CONTENTS~

Introduction ....................................... |lsp_smag_introduction|
Usage ..................................................... |lsp_smag_usage|
Variables ............................................. |lsp_smag_functions|
TODO-List ............................................. |lsp_smag_todo_list|


==============================================================================
						       *lsp_smag_introduction*
INTRODUCTION~

This plugin allows to seamlessly integrate the language server protocol into
NeoVim. It leverages the |tagfunc| option to customize how tags are searched.
Instead of searching in a tag file, this plugin queries all attached language
clients. It queries the servers for the definition, declaration,
implementation and type definition. The resulting list combines all of them
together. It can be partially empty if the server doesn't provide all
capabilities or a response was empty. In case there is no language client
connected to the current buffer, it falls back to the default functionality
with a tag file.

The main advantage is to simplify the whole process of either using a tag file
or the |vim.lsp.client|. Furthermore it also combines all location lookup
functions together. Instead of defining a separated mapping for the
definition, declaration, implementation and type definition this provides all
at once. It can be configured which of them should have the highest priority.
So it is still possible to jump directly or select from a list of all
locations.


==============================================================================
							      *lsp_smag_usage*
USAGE~

The plugin works out of the box. Having the plugin loaded, all |tag| related
commands automatically profit from it. To jump without minding any other
locations use `:tag`. To leverage the multiple locations, the `:tjump` is
the better choice. It will jump directly if there is only one option. Else it
shows all locations and allow to select where to jump to. To always select use
|:tselect|.

Having the |tag-stack| is always convenient. It allows to jump to a definition
or any other location, look around and then jump back where you came from
(|CTRL-T|). This ignores any other jumps you did in between, but don't push to
the |tag-stack|. Also switching between the different locations with `:tnext`
and consorts. Preview it with `:pjump`...


Limitations:~

Mind that when the language client gets used, the provided [name] does not
apply anymore. The requests to the language server work based on the current
cursor position. Unfortunately the [name] must be still provided, since the
commands will not work or work differently else. Checkout the |tags|
documentation for details. As further consequence it is not possible to search
for tags globally. As long as there is a language client attached to the
current buffer, the provided [name] will be ignored. It only applies for the
fall back case when using the tag file again. To make the commands still
work and provide tag support, extend your mappings with the current word
under the cursor (|<C-R_>_<C-W>|). E.g.: >

  nnoremap gd <cmd>execute 'tjump  ' . expand('<cword>')<CR>

This limitation may change in a future version. At the moment their is the
twist that a [name] must be provided. Thereby it is hard to differ if it
should use the default approach (cursor location) or doing a search by
a custom pattern. To search for tag-like objects, this plugin is not made. It
is recommended to use the |vim.lsp.buf.document_symbol()| or
|vim.lsp.buf.workspace_symbol()| functions or a plugin leveraging the related
language server providers.


==============================================================================
							  *lsp_smag_variables*
VARIABLES~

The following variables can be set to customize the behavior of this plugin.

|g:lsp_smag_enabled_providers|

  The language server providers to query for locations. Per default are all
  available providers enabled. It doesn't matter which providers are actually
  supported by each respective server. If a server does not support a specific
  provider, this gets detected early and the request won't be even send to
  safe time.

  Default:~
    [`definition`, `declaration`, `implementation`, `typeDefinition`]

|g:lsp_smag_tag_kind_priority_order|

  The order to sort the retrieved locations by the providers. Therefore the
  entries are also the names of the providers. The order is the same as the
  configured list. Providers which are not listed will have the least
  priority.

  Default:~
    [`definition`, `declaration`, `implementation`, `typeDefinition`]

  Examples:~
    [ `declaration`, `implementation`, `definition`, `typeDefinition` ]
    [ `declaration`, `implementation`]

|g:lsp_smag_fallback_tags|

  Whether to fallback to regular tags (e.g. ctags) when the language server
  didn't return a tag or the LSP client is not running.

  Default: `nil`


==============================================================================
							  *lsp_smag_todo_list*
TODO-List~

  - allow to search for tags by language server (symbols)
  - how to handle multiple attached clients to buffer


==============================================================================

vim:tw=78:ts=8:noet:ft=help:norl:
